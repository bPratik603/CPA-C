/* Push functions */
void push_back(struct vector_int* p_vec_int, int new_data); 
/* 
    @param1: in param: instance of vector 
    @param2: in param: new data 

    data in new_data(@param2) must appear at the end of array inside 
    p_vec_int(@param1)

    Size of internal array, inside p_vec_int(@param1)
    is incremented by 1. 

    No data movement is necessary. 

*/ 

void push_front(struct vector_int* p_vec_int, int new_data); 
/* 
    @param1: p_vec_int: in param: Pointer to dynamically allocated 
                                  instance of struct vec_int 
    
    @param2: new_data: in param:  new data to be inserted at front. 

    Internal array of p_vec_int(@param1), is incremented in size by 1. 
    All elements are shifted to their right by 1 place. 
    new_data(@param2) is insreted at index 0. 

*/ 

int push_at_index(struct vector_int* p_vec_int, size_t index, int new_data); 
/* 
    @param1: p_vec_int:     in param:   pointer to dynamic instance of struct vec_int
    @param2: index:         in param:   valid index inside array of p_vec_int(@param1)
                                        at which new data must be put 
    @param3: new_data:      in param:   data value that must be inserted at index(@param2) 

    Internal array of p_vec_int(@param1) will be resized to hold one more than 
    existing number of elements. 

    All data values from index(@param2) to old_size - 1 will be moved to once place right, 
    index(@param2) + 1 to new_size - 1. 

    new data (@param2) will be assigned to index(@param2)

*/ 

/* Pop functions */
int pop_back(struct vector_int* p_vec_int, int* p_back_data); 
/* 
    @param1 : p_vec_int : in param: pointer to struct vector_int 
    @param2 : p_back_data: out param: pointer to int (to which output 
                                        must be given )
    @return val: SUCCESS if vector is not empty, VEC_EMPTY error 
                if vector is empty 

    Check if vector(@param1) is empty. 
    If it is then return VEC_EMPTY error 

    If vector is not empty 
    then copy the contents of last element of array in vector into the integer 
    whose address is stored in p_back_data (@param2)

    Resize array inside vector to shrink it by sizeof(int) 
    return SUCCESS 
    (No data movement involved here)
*/ 


int pop_front(struct vector_int* p_vec_int, int* p_front_data); 
/* 
    @param1 : p_vec_int: in param : pointer to vector 
    @param2: p_front_data: out param : pointer to int to which return  
                                        value must be given 
    @return: 
        VEC_EMPTY : if vector is empty 
        SUCCESS : if vector is not empty 

    If the internal array of vector is empty then return VEC_EMPTY 

    If the internal array of vector is not empty then 
        i) Copy data value at index 0 of the internal array of vector 
            into *p_front_data(@param2)
        ii) Copy all data values from index 1 to index N-1 (where N 
            is a size member of struct vec_int(@param1)) to 
            index 0, index N-2 
        iii) Resize the internal array of vector to shrink it by sizeof(int)
*/ 

int pop_index(struct  vector_int* p_vec_int, size_t index, int* p_data); 
/* 
    @param1: p_vec_int: in param: pointer to struct vec_int 
    @param2: index: in param: Index in internal array of vector which must be 
                                removed and returned 
    @param3: p_data: out param: pointer to integer containing the address of 
                                integer to which poped data must be returned to 

    @return: VEC_INVALID_INDEX if index(@param2) is out of range 
             SUCCESS if the index(@param2) is within the range 
    
    1)  Index validation:  0 <= index(@param2) <= p_vec_int->N-1 
        (p_vec_int==pointer to struct vec_int) 
        If the index is out of range then return VEC_INVALID_INDEX
    2)  If the index is valid the copy the content of index(@param)
        of the internal array of vector into *p_data(@param3)
    3)  Move all data elements from index(@param) + 1 to N-1 to 
        index to N-2 (where N == p_vec_int->N) 
    4)  Resize the array to shrink it's size by the sizeof(int)

*/ 

/* get & set functions */
int get_index(struct vector_int* p_vec_int, size_t index, int* p_data); 
int set_index(struct vector_int* p_vec_int, size_t index, int new_data); 

////////////////////////////////////////////////////////////////////////////////////

If you can observe yourself without trying to change it 
(without justification, condemnation) then what you obsreve 
undergoes transformation. 

- J. Krishnamurti. 


